{"ast":null,"code":"var _jsxFileName = \"/home/yakari144/UM/5ano/tese/StepwiseSource/client/src/components/SourceCode.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SourceCode({\n  slide\n}) {\n  // inside the slide.code there will be spans with the class names, insert the code in the div with the class name 'code fade'\n  // check if the string matches the regex and return a boolean\n  function checkRegex(str, regex) {\n    const re = new RegExp(regex);\n    // remove white spaces from the string but not all of them\n    str = str.replace(/\\s/g, '');\n    // only match the string if it is the same as the regex\n    return str.match(re);\n  }\n  const handleInputChange = e => {\n    // get the value of the input\n    const value = e.target.value;\n    // given the input element, get the regex attribute\n    const regex = e.target.getAttribute('regex');\n    // check if the value matches the regex\n    const isMatch = checkRegex(value, regex);\n    console.log(isMatch);\n    // if it matches, add the class 'success' to the input, otherwise add the class 'error'\n    e.target.className = isMatch ? 'success' : 'error';\n    // set style to the input\n    e.target.style = isMatch ? {\n      borderColor: 'green'\n    } : {\n      borderColor: 'red'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code fade\",\n    children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: slide.code\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      regex: \"ni\",\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_c = SourceCode;\nexport default SourceCode;\nvar _c;\n$RefreshReg$(_c, \"SourceCode\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SourceCode","slide","checkRegex","str","regex","re","RegExp","replace","match","handleInputChange","e","value","target","getAttribute","isMatch","console","log","className","style","borderColor","children","code","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/home/yakari144/UM/5ano/tese/StepwiseSource/client/src/components/SourceCode.js"],"sourcesContent":["import React from 'react';\n\nfunction SourceCode({slide}) {\n    // inside the slide.code there will be spans with the class names, insert the code in the div with the class name 'code fade'\n    // check if the string matches the regex and return a boolean\n    function checkRegex(str, regex) {\n        const re = new RegExp(regex);\n        // remove white spaces from the string but not all of them\n        str = str.replace(/\\s/g, '');\n        // only match the string if it is the same as the regex\n        return str.match(re);\n        }\n\n    const handleInputChange = (e) => {\n        // get the value of the input\n        const value = e.target.value;\n        // given the input element, get the regex attribute\n        const regex = e.target.getAttribute('regex');\n        // check if the value matches the regex\n        const isMatch = checkRegex(value, regex);\n        console.log(isMatch);\n        // if it matches, add the class 'success' to the input, otherwise add the class 'error'\n        e.target.className = isMatch ? 'success' : 'error';\n        // set style to the input\n        e.target.style = isMatch ? {borderColor: 'green'} : {borderColor: 'red'}\n    };\n\n    return (\n        <div className=\"code fade\">\n            <pre>\n                <code>\n                    {slide.code}\n                </code>\n            </pre>\n            <input type=\"text\" regex=\"ni\" onChange={handleInputChange}/>\n        </div>\n    )\n}\n\nexport default SourceCode;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAC;EAACC;AAAK,CAAC,EAAE;EACzB;EACA;EACA,SAASC,UAAUA,CAACC,GAAG,EAAEC,KAAK,EAAE;IAC5B,MAAMC,EAAE,GAAG,IAAIC,MAAM,CAACF,KAAK,CAAC;IAC5B;IACAD,GAAG,GAAGA,GAAG,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC5B;IACA,OAAOJ,GAAG,CAACK,KAAK,CAACH,EAAE,CAAC;EACpB;EAEJ,MAAMI,iBAAiB,GAAIC,CAAC,IAAK;IAC7B;IACA,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5B;IACA,MAAMP,KAAK,GAAGM,CAAC,CAACE,MAAM,CAACC,YAAY,CAAC,OAAO,CAAC;IAC5C;IACA,MAAMC,OAAO,GAAGZ,UAAU,CAACS,KAAK,EAAEP,KAAK,CAAC;IACxCW,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACpB;IACAJ,CAAC,CAACE,MAAM,CAACK,SAAS,GAAGH,OAAO,GAAG,SAAS,GAAG,OAAO;IAClD;IACAJ,CAAC,CAACE,MAAM,CAACM,KAAK,GAAGJ,OAAO,GAAG;MAACK,WAAW,EAAE;IAAO,CAAC,GAAG;MAACA,WAAW,EAAE;IAAK,CAAC;EAC5E,CAAC;EAED,oBACIpB,OAAA;IAAKkB,SAAS,EAAC,WAAW;IAAAG,QAAA,gBACtBrB,OAAA;MAAAqB,QAAA,eACIrB,OAAA;QAAAqB,QAAA,EACKnB,KAAK,CAACoB;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN1B,OAAA;MAAO2B,IAAI,EAAC,MAAM;MAACtB,KAAK,EAAC,IAAI;MAACuB,QAAQ,EAAElB;IAAkB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEd;AAACG,EAAA,GAnCQ5B,UAAU;AAqCnB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}